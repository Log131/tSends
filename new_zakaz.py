import telebot
from telebot import types
import db_helper



token = ''
owner = [686674950, 5699395851]
pysto = types.InlineKeyboardMarkup()
no_dost = "–ü–æ—Å—Ç–æ–π-–∫–∞! –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞! –î–ª—è –ø–æ–∫—É–ø–∫–∏ –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ @elijist"
platforms = ['–ê–≤–∏—Ç–æ', '–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã', 'Google –ö–∞—Ä—Ç—ã', '2GIS']
orders = 0
bot = telebot.TeleBot(token)

menu1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä")
btn2 = types.KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä")
btn3 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
menu1.add(btn1, btn2, btn3)

markup2 = types.InlineKeyboardMarkup()
btn1 = types.InlineKeyboardButton(platforms[0], callback_data=platforms[0])
btn2 = types.InlineKeyboardButton(platforms[1], callback_data=platforms[1])
btn3 = types.InlineKeyboardButton(platforms[2], callback_data=platforms[2])
btn4 = types.InlineKeyboardButton(platforms[3], callback_data=platforms[3])
btn5 = types.InlineKeyboardButton("–î—Ä—É–≥–∞—è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", callback_data='any')
markup2.add(btn1, btn2, btn3, btn4, btn5)



@bot.message_handler(commands=["delbut"])
def delbut(message):
    bot.send_message(message.chat.id, "–ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç—ã!", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(commands=["getadmins"])
def get(message):
    bot.send_message(message.chat.id, text=db_helper.get_all_admins())

@bot.message_handler(commands=["addadmin"])
def get1(message):
    if message.from_user.id in owner:
        k = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")
        bot.register_next_step_handler(k, report)
    else:
        bot.send_message(message.chat.id, "–£ –º—É–∂–ª–∞–Ω–∞ –Ω–µ—Ç—É –ø—Ä–∞–≤")

@bot.message_handler(commands=["delete_admin"])
def get1(message):
    if message.from_user.id in owner:
        k = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ id –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã:")
        bot.register_next_step_handler(k, del_report)
    else:
        bot.send_message(message.chat.id, "–£ –º—É–∂–ª–∞–Ω–∞ –Ω–µ—Ç—É –ø—Ä–∞–≤")

def report(message):
    i = int(message.text)
    db_helper.add_admin(i)

def del_report(message):
    i = int(message.text)
    db_helper.delete_admin(i)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == 'any':
            anys = bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–≤–µ–¥–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:")
            bot.register_next_step_handler(anys, any_plat)

        if call.data in platforms:
            otzservice = call.data
            db_helper.set_otzservice(call.message.chat.id, otzservice)
            nextys = bot.send_message(call.message.chat.id, f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {otzservice}\n–£–∫–∞–∂–∏—Ç–µ –æ–ø–ª–∞—Ç—É:")
            bot.register_next_step_handler(nextys, oplata_za_otziv)

        if call.data == '–¥–∞':
            gotovi_text = db_helper.get_finish_text(call.message.chat.id)
            otkl = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", url='https://t.me/'+db_helper.get_user_name(call.message.chat.id))
            otkl.add(button1)
            bot.send_message("@SHARDotz", gotovi_text, parse_mode="Markdown", reply_markup=otkl)
            bot.send_message(call.message.chat.id, "–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ!".format(call.message.from_user),
                               reply_markup=menu1)

        if call.data == "–Ω–µ—Ç":
              bot.send_message(call.message.chat.id, "–í–∏–¥–∏–º–æ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É...\n–ü–æ–∂–∞–ª—É–π, —è —ç—Ç–æ —É–¥–∞–ª—é.",
                               reply_markup=menu1)

@bot.message_handler(commands=["myid"])
def satr(message):
    bot.send_message(message.chat.id, message.from_user.id)

@bot.message_handler(commands=["start"])
def satrt(message):
    if db_helper.equals_admin(message.from_user.id):
        db_helper.set_user_name(message.from_user.id, message.from_user.username)
        db_helper.set_chat_id(message.from_user.id, message.chat.id)
        bot.send_message(message.chat.id,
             "ü§¥–ö–∞–±–∏–Ω–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–∞–±–æ—Ä—ã".format(
             message.from_user), reply_markup=menu1)
    else:
        bot.send_message(message.chat.id, no_dost)

@bot.message_handler(content_types=["text"])
def unlock(message):
    if db_helper.equals_admin(message.from_user.id):
        chat_id = db_helper.get_chat_id(int(message.from_user.id))
        if message.text.lower() == "—Å–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä":
            pl = bot.send_message(chat_id,
                                  "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:".format(message.from_user), reply_markup=markup2)
        elif message.text.lower() == "–∑–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä":
            print(1111)
            z = bot.send_message(chat_id, "–°—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç:")
            bot.register_next_step_handler(z, close)
        elif message.text.lower() == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            if db_helper.equals_admin(message.from_user.id):
                status = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            else:
                status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            bot.send_message(message.chat.id,
                             f"*–í–∞—à Telegram ID:* {message.from_user.id}\n*–í–∞—à Username:* @{message.from_user.username}\n"
                             f"*–í—ã:* {status}\n[*–ö–∞–Ω–∞–ª*](t.me/SHARDotz)\n[*–í—ã–ø–ª–∞—Ç—ã*](t.me/shardopl)\n"
                             f"[*–û—Ç–∑—ã–≤—ã*](t.me/repshard)", parse_mode="Markdown")

        elif '/addadmin' in message.text.lower():
            adminid = message.text.split(maxsplit=1)[1]
            if message.from_user.id in owner:
                db_helper.add_admin(int(adminid))
                bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ!")
        else:
            bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\n–í–æ–∑–º–æ–∂–Ω–æ, –í—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä?",
                             reply_markup=menu1)

@bot.message_handler(func=lambda message: db_helper.equals_admin(message.from_user.id))
def close(message):
    chatik = db_helper.get_chat_id(message.from_user.id)
    link = message.text
    print(link[22:])
    bot.edit_message_text(chat_id = "@SHARDotz", message_id=link[22:], text= "üîí* –ù–∞–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∑–∞–∫—Ä—ã—Ç, –∏–¥—ë—Ç –≤—ã–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏–π... *",parse_mode="Markdown",reply_markup=pysto)
    bot.send_message(chatik, "–ì–æ—Ç–æ–≤–æ!", reply_markup=menu1)

@bot.message_handler(func=lambda message: db_helper.equals_admin(message.from_user.id))
def any_plat(message):
    db_helper.set_otzservice(message.from_user.id, message.text)
    opls = bot.send_message(db_helper.get_chat_id(message.from_user.id), "–£–∫–∞–∂–∏—Ç–µ –æ–ø–ª–∞—Ç—É:")
    bot.register_next_step_handler(opls, oplata_za_otziv)

@bot.message_handler(func=lambda message: db_helper.equals_admin(message.from_user.id))
def get_plat(message):
    opls = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –æ–ø–ª–∞—Ç—É:")
    bot.register_next_step_handler(opls, oplata_za_otziv)

@bot.message_handler(func=lambda message: db_helper.equals_admin(message.from_user.id))
def oplata_za_otziv(message):
    db_helper.set_chels(message.from_user.id, message.text)
    comm = bot.send_message(db_helper.get_chat_id(message.from_user.id), "–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–∞–±–æ—Ä—É:".format(message.from_user),
                            reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(comm, com)

@bot.message_handler(func=lambda message: db_helper.equals_admin(message.from_user.id))
def com(message):
    comment = message.text
    global orders
    orders += 1
    data = db_helper.get_data_admin(message.from_user.id)
    potd = types.InlineKeyboardMarkup()
    da = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="–¥–∞")
    net = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="–Ω–µ—Ç")
    potd.add(da, net)
    text = f"*‚ñ∏ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {data[0]}*\n*‚ñ∏ –ü–æ–ª—É—á–∏—Ç–µ –æ–ø–ª–∞—Ç—É: {data[1]}‚ÇΩ*\n*‚ñ∏ –û–ø–∏—Å–∞–Ω–∏–µ: {comment}*\n\n‚òÖ *–ü–∏—Å–∞—Ç—å: @{data[2]}*\n‚òÜ –ù–∞—à–∏ –≤—ã–ø–ª–∞—Ç—ã: @SHARDopl"
    db_helper.set_finish_text(message.from_user.id, text)
    bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ, —è –í–∞—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?\n{text}\n", parse_mode="Markdown", reply_markup=potd)


bot.infinity_polling()